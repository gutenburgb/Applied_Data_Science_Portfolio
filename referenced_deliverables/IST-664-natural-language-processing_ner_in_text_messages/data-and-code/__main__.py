"""
SMS Entity Analysis
Leland Ball, December 2020

NOTES:
    # all packages:
    conda install pandas spacy matplotlib seaborn nltk pyprind

    # for __main__.py
    conda install pandas

    # for extracting from xml
    conda install pyprind

    # for analysis
    conda install pandas spacy matplotlib seaborn nltk
"""
from pathlib import Path
import extract_anonymize
import analyze
import sys
import pandas as pd

def main(extract_op=False, analyze_op=False, full_reprocess_op=False):
    # all paths are subsequently based upon this initial path
    # adjust to point to base directory where data lives
    # must contain the 'data\anonymized' and 'data\original' folders
    path_base = Path.cwd()  # change to exact directory if necessary

    # raw data from mobile phone export
    path_orig_data = path_base / 'data' / 'original'
    path_xml_file_import = path_orig_data / 'sms-20201214111011.xml'

    # data that has been processed (not actually anonymized)
    path_anon_data = path_base / 'data' / 'anonymized'
    path_sms_csv_anon = path_anon_data / 'sms-anon.csv'
    path_sms_csv_small_dataset = path_anon_data / 'sms-anon-small.csv'
    path_labels_csv = path_anon_data / 'sms-labels.csv'

    # paths to hand-labeled Person entities
    # this is generated by user after running the 'extract' command
    # and must exist for the 'analyze' command to run
    path_to_label_entities_csv = path_orig_data / 'label-me-in-excel.csv'

    # paths to name files
    path_to_given_names = path_orig_data / 'given_names' / 'all.txt'
    path_to_surnames = path_orig_data / 'surnames' / 'all.txt'

    path_to_labeled_entities_csv = path_orig_data / 'labeled-in-excel.csv'  # do not save over this file. This file has been manually edited to label correct PERSON entities
    path_to_labeled_entities_raw = path_orig_data / 'labeled-in-excel.raw'

    if extract_op:
        extract_anonymize.extract(path_xml_file_import, path_sms_csv_anon, path_labels_csv)
        print('extraction complete')

    if analyze_op:
        print(r"Analysis begun. Expect charts and sys output to start")
        if full_reprocess_op:
            # perform data load from original sms/mms data
            # perform preprocess
            df = analyze.load_data(path_sms_csv_anon)  # used only when all data is available
            df_sample = analyze.preprocess(df,
                                           path_export_csv=path_to_label_entities_csv,
                                           path_export_raw=path_to_labeled_entities_raw)
        else:
            # skip full load and instead resume from the preprocess step
            df_sample = analyze.preprocess_from_file(path_to_labeled_entities_raw)

        df_names = analyze.load_baseline(path_to_given_names, path_to_surnames)

        # analyze Spacey's NER Person Recognition
        print(r"Analysis of Spacey's NER Person Recognition")
        analyze.analyze_spacey(df_sample, path_to_labeled_entities_csv)

        # analyze Baseline Naive Dictionary Person Recognition
        print(r"Analysis of Baseline Naive Dictionary Person Recognition")
        analyze.analyze_baseline(df_sample, df_names, path_to_labeled_entities_csv, just_given_names=False)

        # analyze Baseline Naive Dictionary Person Recognition (just given names)
        print(r"Analysis of Baseline Naive Dictionary Person Recognition (just given names)")
        analyze.analyze_baseline(df_sample, df_names, path_to_labeled_entities_csv, just_given_names=True)

        # analyze Baseline, but remove dictionary words from just given names
        print(r"Analysis of Baseline, but remove dictionary words from just given names")
        analyze.analyze_baseline(df_sample, df_names, path_to_labeled_entities_csv,
                                 remove_dictionary_words=True,
                                 just_given_names=True)

        print('analysis complete')
        input('press enter.')

def print_help():
    print(f'Correct commands are: "extract" or "analyze":\n\tpython {sys.argv[0]} [COMMAND]\n')

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if 'extract' in sys.argv[1]:
            print('extracting...')
            main(extract_op=True)
        elif 'analyze-full' in sys.argv[1]:
            print('analyzing, recomputing data from original files...')
            main(full_reprocess_op=True, analyze_op=True)
        elif 'analyze' in sys.argv[1]:
            print('analyzing...')
            main(analyze_op=True)
        else:
            print_help()
    else:
        print_help()

    print('done')